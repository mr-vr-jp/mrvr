name: Remove Comments on Push

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  remove-comments:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies for comment removal
      run: |
        npm init -y
        npm install cheerio jsdom
        
    - name: Remove comments from files
      run: |
        node -e "
        const fs = require('fs');
        const path = require('path');
        const { JSDOM } = require('jsdom');
        
        // JavaScript ファイルのコメント削除関数
        function removeJSComments(content) {
          // 行コメント (//) を削除（文字列内は除く）
          content = content.replace(/(?:^|\n|\r)(\s*)\/\/.*$/gm, '');
          
          // ブロックコメント (/* */) を削除（文字列内は除く）
          content = content.replace(/\/\*[\s\S]*?\*\//g, '');
          
          // 空行を削除
          content = content.replace(/^\s*\n/gm, '');
          
          // 連続する空行を1つに
          content = content.replace(/\n\s*\n\s*\n/g, '\n\n');
          
          return content;
        }
        
        // HTML ファイルのコメント削除関数（インラインJSも処理）
        function removeHTMLComments(filePath) {
          try {
            let content = fs.readFileSync(filePath, 'utf8');
            
            // HTML コメント <!-- --> を削除
            content = content.replace(/<!--[\s\S]*?-->/g, '');
            
            // インラインJavaScriptのコメントも削除
            content = content.replace(/<script[^>]*>([\s\S]*?)<\/script>/gi, (match, jsContent) => {
              const cleanJS = removeJSComments(jsContent);
              return match.replace(jsContent, cleanJS);
            });
            
            // インラインCSSのコメントも削除
            content = content.replace(/<style[^>]*>([\s\S]*?)<\/style>/gi, (match, cssContent) => {
              const cleanCSS = cssContent.replace(/\/\*[\s\S]*?\*\//g, '');
              return match.replace(cssContent, cleanCSS);
            });
            
            fs.writeFileSync(filePath, content);
            console.log(\`Processed HTML: \${filePath}\`);
          } catch (error) {
            console.error(\`Error processing \${filePath}:\`, error.message);
          }
        }
        
        // CSS ファイルのコメント削除関数
        function removeCSSComments(filePath) {
          try {
            let content = fs.readFileSync(filePath, 'utf8');
            
            // CSS コメント /* */ を削除
            content = content.replace(/\/\*[\s\S]*?\*\//g, '');
            
            // 空行を削除
            content = content.replace(/^\s*\n/gm, '');
            
            fs.writeFileSync(filePath, content);
            console.log(\`Processed CSS: \${filePath}\`);
          } catch (error) {
            console.error(\`Error processing \${filePath}:\`, error.message);
          }
        }
        
        // JavaScript ファイルのコメント削除関数
        function removeJSCommentsFromFile(filePath) {
          try {
            let content = fs.readFileSync(filePath, 'utf8');
            content = removeJSComments(content);
            fs.writeFileSync(filePath, content);
            console.log(\`Processed JS: \${filePath}\`);
          } catch (error) {
            console.error(\`Error processing \${filePath}:\`, error.message);
          }
        }
        
        // PWA Service Worker ファイルの処理
        function processPWAFiles(filePath) {
          try {
            if (filePath.endsWith('sw.js') || filePath.endsWith('manifest.json')) {
              if (filePath.endsWith('.js')) {
                removeJSCommentsFromFile(filePath);
              }
              // manifest.jsonはJSONファイルなので、コメントは通常ないが念のため確認
            }
          } catch (error) {
            console.error(\`Error processing PWA file \${filePath}:\`, error.message);
          }
        }
        
        // ファイルを再帰的に検索して処理
        function processFiles(dir) {
          const files = fs.readdirSync(dir, { withFileTypes: true });
          
          for (const file of files) {
            const fullPath = path.join(dir, file.name);
            
            if (file.isDirectory()) {
              // node_modules, .git, .github などのディレクトリは除外
              // assetsのimagesディレクトリは除外するが、css、jsディレクトリは処理する
              if (!['node_modules', '.git', '.github', 'dist', 'build'].includes(file.name)) {
                // assetsディレクトリの場合はimagesディレクトリのみ除外
                if (file.name === 'assets') {
                  const assetsFiles = fs.readdirSync(fullPath, { withFileTypes: true });
                  for (const assetsFile of assetsFiles) {
                    const assetsFullPath = path.join(fullPath, assetsFile.name);
                    if (assetsFile.isDirectory() && !['images'].includes(assetsFile.name)) {
                      processFiles(assetsFullPath);
                    } else if (assetsFile.isFile()) {
                      processFileByExtension(assetsFullPath);
                    }
                  }
                } else {
                  processFiles(fullPath);
                }
              }
            } else if (file.isFile()) {
              processFileByExtension(fullPath);
            }
          }
        }
        
        // ファイル拡張子によって適切な処理を実行
        function processFileByExtension(fullPath) {
          const ext = path.extname(fullPath).toLowerCase();
          const filename = path.basename(fullPath);
          
          // sitemap.xml と robots.txt は除外
          if (filename === 'sitemap.xml' || filename === 'robots.txt') {
            console.log(\`Skipping SEO file: \${filename}\`);
            return;
          }
          
          if (ext === '.js') {
            // PWAファイルの場合は専用処理
            if (filename === 'sw.js') {
              processPWAFiles(fullPath);
            } else {
              removeJSCommentsFromFile(fullPath);
            }
          } else if (ext === '.html' || ext === '.htm') {
            removeHTMLComments(fullPath);
          } else if (ext === '.css') {
            removeCSSComments(fullPath);
          } else if (filename === 'manifest.json') {
            // manifest.jsonは通常コメントを含まないが、念のため確認
            processPWAFiles(fullPath);
          }
        }
        
        // 現在のディレクトリから処理開始
        processFiles('.');
        "
        
    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Commit changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
                git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Remove comments from code files [skip ci]"
        git push 